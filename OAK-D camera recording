#!/usr/bin/env python3

from pathlib import Path
import sys
import cv2
import depthai as dai
import numpy as np
import threading

camb_filepath = 'recorded_data/camb_mono.h264'

# Get argument first
nnPath = str((Path(__file__).parent / Path('../models/mobilenet-ssd_openvino_2021.4_6shave.blob')).resolve().absolute())
if len(sys.argv) > 1:
    nnPath = sys.argv[1]

if not Path(nnPath).exists():
    import sys
    raise FileNotFoundError(f'Required file/s not found, please run "{sys.executable} install_requirements.py"')

# MobilenetSSD label texts
labelMap = ["background", "aeroplane", "bicycle", "bird", "boat", "bottle", "bus", "car", "cat", "chair", "cow",
            "diningtable", "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor"]

# Create pipeline
pipeline = dai.Pipeline()

# Define sources and outputs
monoRight = pipeline.create(dai.node.MonoCamera)
manip = pipeline.create(dai.node.ImageManip)
nn = pipeline.create(dai.node.MobileNetDetectionNetwork)
manipOut = pipeline.create(dai.node.XLinkOut)
nnOut = pipeline.create(dai.node.XLinkOut)
manipOut.setStreamName("Right")
nnOut.setStreamName("nn")

#encoder node
veR = pipeline.create(dai.node.VideoEncoder)
#XLinkOut node : the data being stored
veROut = pipeline.create(dai.node.XLinkOut)
veROut.setStreamName('veROut')


# Properties

#encoder node
veR.setDefaultProfilePreset(30, dai.VideoEncoderProperties.Profile.H264_MAIN)
#display nodes
monoRight.setCamera("Right")
monoRight.setResolution(dai.MonoCameraProperties.SensorResolution.THE_720_P)
manip.setMaxOutputFrameSize(monoRight.getResolutionHeight()*monoRight.getResolutionWidth()*3)

# Convert the grayscale frame into the nn-acceptable form
manip.initialConfig.setResize(300, 300)
# The NN model expects BGR input. By default ImageManip output type would be same as input (gray in this case)
manip.initialConfig.setFrameType(dai.ImgFrame.Type.BGR888p)

nn.setConfidenceThreshold(0.5)
nn.setBlobPath(nnPath)
nn.setNumInferenceThreads(2)
nn.input.setBlocking(False)

## Linking
#camera -> encoder
monoRight.out.link(veR.input)
#encoder -> output
veR.bitstream.link(veROut.input)

monoRight.out.link(manip.inputImage)
manip.out.link(nn.input)
manip.out.link(manipOut.input)
nn.out.link(nnOut.input)


# Connect to device and start pipeline
with dai.Device(pipeline) as device:

    # Output queues will be used to get the grayscale frames and nn data from the outputs defined above
    qRight = device.getOutputQueue("Right", maxSize=4, blocking=False)
    qDet = device.getOutputQueue("nn", maxSize=4, blocking=False)

    frame = None
    detections = []

    # nn data, being the bounding box locations, are in <0..1> range - they need to be normalized with frame width/height
    def frameNorm(frame, bbox):
        normVals = np.full(len(bbox), frame.shape[0])
        normVals[::2] = frame.shape[1]
        return (np.clip(np.array(bbox), 0, 1) * normVals).astype(int)

    def displayFrame(name, frame):
        color = (255, 0, 0)
        for detection in detections:
            bbox = frameNorm(frame, (detection.xmin, detection.ymin, detection.xmax, detection.ymax))
            cv2.putText(frame, labelMap[detection.label], (bbox[0] + 10, bbox[1] + 20), cv2.FONT_HERSHEY_TRIPLEX, 0.5, color)
            cv2.putText(frame, f"{int(detection.confidence * 100)}%", (bbox[0] + 10, bbox[1] + 40), cv2.FONT_HERSHEY_TRIPLEX, 0.5, color)
            cv2.rectangle(frame, (bbox[0], bbox[1]), (bbox[2], bbox[3]), color, 2)
        # Show the frame
        cv2.imshow(name, frame)

#output queue : store data from output 
    outQ_R = device.getOutputQueue(name=veROut.getStreamName(), maxSize=30, blocking=True)

    #display queue : 
    showQ_R = device.getOutputQueue(name=manipOut.getStreamName(), maxSize=4,blocking=False)

#output queue : store data from output 
    outQ_R = device.getOutputQueue(name=veROut.getStreamName(), maxSize=30, blocking=True)

    #display queue : 
    showQ_R = device.getOutputQueue(name=manipOut.getStreamName(), maxSize=4,blocking=False)


    def read_and_display_img():
        while True:
            if(showQ_R.has()):
                cv2.imshow("camb", showQ_B.get().getCvFrame())
            key = cv2.waitKey(1)

    #display thread
    img_reading_thread= threading.Thread(target=read_and_display_img)
    img_reading_thread.start()

    #main thread
    with open(camb_filepath, 'wb') as file_camb_H264:
        print("Recording start.")
        print("Press Ctrl+C to stop recording...")
        
while True:
        # Instead of get (blocking), we use tryGet (non-blocking) which will return the available data or None otherwise
        inRight = qRight.tryGet()
        inDet = qDet.tryGet()

        if inRight is not None:
            frame = inRight.getCvFrame()

        if inDet is not None:
            detections = inDet.detections

        if frame is not None:
            displayFrame("Right", frame)

        if cv2.waitKey(1) == ord('q'):
            break
while True:

	try:
		# Empty the output queue and store the
		while outQ_B.has():
			outQ_B.get().getData().tofile(file_camb_H264)
		while outQ_C.has():
			outQ_C.get().getData().tofile(file_camc_H264)
	except KeyboardInterrupt:
		break
